// PROMPT 2: 3D ANIMATION LOGIC

// OBJECTIVE
// Define the specific 3D animation logic for the "Lunar Vault" web app, suitable for implementation within a Python-based web framework. The animations must be functional, purposeful, and enhance the "Living Interface" concept by making data visualization intuitive and engaging.

// CORE PRINCIPLES
// 1. FUNCTIONAL MOTION
// - Every animation must serve a purpose, such as providing feedback, guiding user attention, or making complex data intuitive.
// - Animation should support the user's journey and help them complete tasks more efficiently, not distract them with unnecessary movement.

// 2. PHYSICS-BASED & ORGANIC FEEL
// - Animations should feel natural and responsive, not robotic. Employ principles of physics-based motion to create a high-quality, futuristic feel.
// - Key principles to apply include:
//     - **Easing:** Control the acceleration and deceleration of objects to mimic real-world movement and make transitions feel smooth.
//     - **Transformation:** Animate state changes by morphing one element into another (e.g., a button transforming into a progress indicator) to provide clear, immediate feedback.
//     - **Staging:** Use motion to direct the user's eye to the most important information on the screen, creating a clear visual hierarchy.

// 3. PERFORMANCE
// - Animations must be lightweight and optimized for web performance to ensure a smooth experience across all devices.
// - Use efficient, modern formats like **Lottie JSON** or **glTF** for all animated icons and visualizations.

// SPECIFIC ANIMATION LOGIC
// 1. BACKGROUND ANIMATION
// - The app background must be a subtle, dynamic 3D celestial theme (e.g., slow-moving nebulae, abstract cosmic dust, or faint aurora effects).
// - The animation should be non-distracting and serve to create an immersive, deep-space environment behind the UI elements. It should be visually present but not compete for attention with the foreground data.

// 2. ICON & INDICATOR ANIMATION
// - All icons (navigation, KPIs, weather) must be **animated 3D objects**.
// - They must reflect real-time data status, making the interface feel alive.
//     - **Example 1:** The "Solar Production" sun icon should pulse with a soft glow that intensifies in brightness and speed as the kW output increases.
//     - **Example 2:** The "Grid Status" icon should visualize energy particles flowing into the home when importing and flowing out when exporting.
//     - **Example 3:** The "Battery" icon should visually fill up or deplete based on its charge level.
// - Navigation icons should have subtle idle animations (e.g., a slow rotation or gentle float) and respond to hover and click with more pronounced, satisfying effects.

// 3. REAL-TIME ENERGY FLOW ANIMATION
// - This is the central visual element of the dashboard and must be a highly dynamic 3D visualization.
// - Represent energy as **animated particles** or a fluid-like substance flowing between sources (Solar, Grid) and destinations (Home, Battery).
// - The speed and density of the particles should directly correspond to the amount of power (kW) being transferred.
// - Crucially, it must include **reverse animation** to clearly visualize energy being exported back to the grid or used to charge the battery, with particles flowing in the opposite direction.

// 4. TRANSITION ANIMATION
// - Page and state transitions must be fluid and seamless, reinforcing the app's spatial logic.
// - When a user clicks a KPI, the holographic element should smoothly expand, transform, or animate into the title or main chart of the new detailed analytics page. This creates a clear visual and logical connection between the summary view and the detailed view, making the user experience feel cohesive and intuitive.